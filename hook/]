#include <link.h>
#include <stdio.h>
#include <stdint.h>
#include <unistd.h>
#include <sys/mman.h>
#include <string.h>

// Dummy target function to be hooked
int target_function(int x) {
    printf("Original target_function called with %d\n", x);
    return x + 1;
}

// Our replacement function
int my_hook(int x) {
    printf("[hooked] called with %d\n", x);
    return 1337;
}

// Function that patches the target function
void hook_function(void* target, void* hook) {
    // Machine code: mov rax, hook; jmp rax
    // 48 B8 <hook_addr:8> FF E0
    uint8_t patch[12];
    patch[0] = 0x48;
    patch[1] = 0xB8;
    *(uint64_t*)&patch[2] = (uint64_t)hook;
    patch[10] = 0xFF;
    patch[11] = 0xE0;

    // Unprotect memory
    size_t page_size = sysconf(_SC_PAGESIZE);
    uintptr_t page_start = (uintptr_t)target & ~(page_size - 1);
    mprotect((void*)page_start, page_size, PROT_READ | PROT_WRITE | PROT_EXEC);

    // Patch the target
    memcpy(target, patch, sizeof(patch));
}


static int find_main_text_segment(struct dl_phdr_info *info, size_t size, void *data) {
    if (info->dlpi_name == NULL || info->dlpi_name[0] == '\0') {
        printf("[*] Main binary base address: %p\n", (void*)info->dlpi_addr);

        for (int i = 0; i < info->dlpi_phnum; i++) {
            const ElfW(Phdr) *phdr = &info->dlpi_phdr[i];
            if (phdr->p_type == PT_LOAD && (phdr->p_flags & PF_X)) {
                uintptr_t text_start = info->dlpi_addr + phdr->p_vaddr;
                uintptr_t text_end   = text_start + phdr->p_memsz;

                printf("[+] .text segment of main binary: %p - %p (%lx bytes)\n", (void*)text_start, (void*)text_end, phdr->p_memsz);
                uintptr_t* data_text_start = (uintptr_t*)data;
                *data_text_start = text_start;
                break;
            }
        }
    }

    return 0; // continue iteration
}

typedef int (*foo_t)(int, float);

__attribute__((constructor))
int so_main() {
    uintptr_t text_start;
    dl_iterate_phdr(find_main_text_segment, (void*)&text_start);
    printf("%p, 0x%lx\n", so_main, text_start);
    foo_t fooptr;
    fooptr = (foo_t)(text_start + 4425 - 4096);
    fooptr(100, 1000.0)
    // Hook it
    //hook_function((void*)0x4542, (void*)my_hook);

    //printf("After hook:\n");
    //target_function(42);

    return 0;
}

